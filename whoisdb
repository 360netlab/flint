#!/usr/bin/env python
import sys
import os
import socket
import urllib2
import optparse
from StringIO import StringIO

try:
    import simplejson as json
except ImportError:
    import json
import traceback

__VERSION__ = "2.0.4"

__AUTHOR__ = "passivedns@360.cn"

DEFAULT_CONFIG_FILE = '~/.netlab.token'

API = "api.netlab.360.com"

# Require a token file at ~/.netlab.token
TOKEN = ""

WHOISDB_METHOD_WITH_COLUMN_OP = ['count', 'reverse']
WHOISDB_METHOD_MULTI_ARGS     = ['exists', 'detail', 'count', 'history']
WHOISDB_METHOD_SINGLE_ARGS    = ['related' ]
WHOISDB_METHOD = WHOISDB_METHOD_WITH_COLUMN_OP + WHOISDB_METHOD_MULTI_ARGS + WHOISDB_METHOD_SINGLE_ARGS

COLUMNS = [
    "name", "email" , "organization" , "phone", "nameserver",
    "registrant_email", "registrant_name", "registrant_organization", "registrant_phone",
    "admin_email", "admin_name", "admin_organization",
    "tech_email", "tech_name", "tech_organization"
]


ALLCOLUMN = [
    "domainname",
    "createddate",
    "updateddate",
    "expiresdate",
    "status",
    "registrant_email",
    "registrant_name",
    "registrant_organization",
    "registrant_address",
    "registrant_city",
    "registrant_state",
    "registrant_postalcode",
    "registrant_country",
    "registrant_fax",
    "registrant_telephone",
    "admin_email",
    "admin_name",
    "admin_organization",
    "admin_address",
    "admin_city",
    "admin_state",
    "admin_postalcode",
    "admin_country",
    "admin_fax",
    "admin_telephone",
    "tech_email",
    "tech_name",
    "tech_organization",
    "tech_address",
    "tech_city",
    "tech_state",
    "tech_postalcode",
    "tech_country",
    "tech_fax",
    "tech_telephone",
    "billing_email",
    "billing_name",
    "billing_organization",
    "billing_address",
    "billing_city",
    "billing_state",
    "billing_postalcode",
    "billing_country",
    "billing_fax",
    "billing_telephone",
    "zone_email",
    "zone_name",
    "zone_organization",
    "zone_address",
    "zone_city",
    "zone_state",
    "zone_postalcode",
    "zone_country",
    "zone_fax",
    "zone_telephone",
    "registrarname",
    "whoisserver",
    "nameservers",
    "first_seen",
    #"last_seen",
    "r_whoisserver_list",
    "r_text_list",
]


BRIEFCOLUMN = [
    "domainname",
    "createddate",
    "updateddate",
    "expiresdate",
    "status",
    "registrant_email",
    "registrant_name",
    "registrant_organization",
    "admin_email",
    "admin_name",
    "admin_organization",
    "tech_email",
    "tech_name",
    "tech_organization",
    "zone_email",
    "zone_name",
    "zone_organization",
    "registrarname",
    "whoisserver",
    "nameservers",
    "first_seen",
    #"last_seen",
    "r_text_list",
]


def parse_config(cfg_fname):
    config = {}
    cfg_files = filter(os.path.isfile,
            (os.path.expanduser(cfg_fname), os.path.expanduser('~/.netlab.token')))

    if not cfg_files:
        raise Exception("No config file found")

    try:
        for fname in cfg_files:
            for line in open(fname):
                line = line.strip()

                if not line: continue
                if line.startswith("#"): continue

                key, eq, val = line.partition('=')
                key = key.strip()
                val = val.strip().strip('"')
                config[key] = val
    except:
        raise Exception("Config file '%s' parse error", cfg_fname)
    return config


def usage():
    s = StringIO()
    fname = sys.argv[0]
    s.write("Usage:  %s exists  domain,domain,... \n" % fname)
    s.write("\t%s detail  domain,domain,... \n" % fname)
    s.write("\t%s history domain \n" % fname )
    s.write("\t%s count   domain,domain,... \n" % fname)
    s.write("\t%s count   field  value \n" % fname)
    s.write("\t%s related domain \n" % fname)
    s.write("\t%s reverse value ( default field : <name && email && organization> )\n" % fname)
    s.write("\t%s reverse field value\n" % fname)
    s.write("\n")
    s.write("\tfield: (%s)\n" % ", ".join(COLUMNS))
    s.seek(0)
    return s.read().strip()


def parse_option():
    parser = optparse.OptionParser(usage=usage())
    parser.add_option("-d", "--debug"   , action="store_true", dest="debug"   , default=False,
                      help="show http url and and http header, including SENSITIVE token")
    parser.add_option("-b", "--brief"   , action="store_true", dest="brief"   , default=False,
                      help="show parts of fields (name, email, organization)")
    parser.add_option("-v", "--verbose" , action="store_true", dest="verbose" , default=False,
                      help="show detail field (original unparsed WHOIS)")
    parser.add_option("-j", "--json"    , action="store_true", dest="jsond"   , default=False,
                      help="output in json format")
    parser.add_option("-r", "--renew"   , action="store_true", dest="renew"   , default=False,
                      help="Refresh record if not exists, used with detail, one domain per query")
    parser.add_option("-V", "--version" , action="store_true", dest="version")
    parser.add_option("-l", "--limit"   , action="store" , type="int"    , default=1000   , dest="limit",
                      help="maximum number of results. works for method reverse and related. [default: %default]")
    parser.add_option("-s", "--skip"    , action="store" , type="int"    , default=0      , dest="skip",
                      help="number of documents to skip. works for method reverse and related. [default: %default]")
    parser.add_option('-c', '--config'  , dest='config'  , type='string' , default=DEFAULT_CONFIG_FILE,
                      help='config file')
    return parser


class WhoisdbClient():
    def __init__(self, api, token, conf):
        self.api = api
        self.token = token
        self.conf = conf

    def panic(self, error, hard=True):
        sys.stderr.write("%s\n" %error)
        if hard:
            sys.exit(1)

    def println(self, *items):
        s = StringIO()
        for item in items:
            s.write(item)
            s.write("\t")
        s.seek(0)
        data = s.read()
        try:
            print data
        except:
            print data.encode("utf-8")

    def setup_header(self, req, path):
        req.add_header('Accept', 'application/json')
        req.add_header('X-AuthToken', self.token)
        return req

    def print_data(self, domain, field, val):
        if type(val) == list:
            for item in val:
                self.println(domain, field, item)
        else:
            self.println(domain, field, val)

    def dump_exists(self, data):
        for (key, value) in data:
            self.println(key, unicode(value))

    def dump_count(self, data):
        for item in data:
            if isinstance(item, int):
                self.println("%d" % (item))
            elif isinstance(item, list) and len(item) == 2:
                self.println("%s\t%d" % (item[0], item[1]))

    def dump_detail(self, data, dump_record_date=True):
        for itemDict in data:
            self._dump_detail(itemDict, dump_record_date)

    def _dump_detail(self, itemDict, dump_record_date=True):
        domain = itemDict['r_domainname']
        columns = BRIEFCOLUMN if self.conf.brief else ALLCOLUMN
        for col in columns:
            if col in itemDict:
                if col != "r_text_list":
                    value = " | ".join(itemDict[col]) if isinstance(itemDict[col], list) else itemDict[col]
                else:
                    value = ("\n\n%s\n\n" % ("+"*80)).join(itemDict[col]) if isinstance(itemDict[col], list) else itemDict[col]
                    value = "\n" + value + "\n"
                    value = value.replace("\n", "\n>>> ")
                s = "%s\t%-28s%s" % (domain, col, value)
                self.println(s)

    def dump_history(self, data):
        for item in data:
            record_date = item.get("record_date", "null")
            ts = "========== %s ==========" % (item['first_seen'])
            self.println(ts)
            self._dump_detail(item, False)

    def dump_related(self, data):
        for domain in sorted(data):
            self.println(domain)

    def dump_reverse(self, data):
        for item in sorted(data):
            self.println(item)

    def compose_url(self, args):
        method = args[0]
        method_args = args[1:]

        index_method = 1
        if args[0] in WHOISDB_METHOD_WITH_COLUMN_OP:
            if len(args) >=2 and args[1] in COLUMNS:
                index_method =2
            method = "/".join(args[0:index_method])
            method_args = args[index_method:]
            uri = ",".join(method_args)
        elif method in WHOISDB_METHOD_MULTI_ARGS:
            uri = ",".join(method_args)
        else:
            uri = "/".join(method_args)

        server_conf = {"skip":self.conf.skip, "limit":self.conf.limit}
        if self.conf.verbose:
            server_conf["verbose"] = 1
        if self.conf.renew:
            server_conf["renew"] = 1
        uri_parameter = '&'.join(['%s=%s' % (key, value) for (key, value) in server_conf.items()])
        if len(uri) == 0:
            url = "http://%s/whoisdb/%s/" % (self.api, method )
        else:
            url = "http://%s/whoisdb/%s/%s/?%s" % (self.api, method, uri, uri_parameter)
        return url, uri

    def is_data_ok(self, data):
        if "code" in data and data["code"] == 200:
            if "status" in data and data["status"] == "ok":
                if "data" in data and data["data"] != None:
                    return True
        return False

    def _do_query(self, args):
        try:
            url, uri = self.compose_url(args)
            req = self.setup_header(urllib2.Request(url), uri)
            if self.conf.debug:
                print req.get_full_url()
                print req.headers
            resp = urllib2.urlopen(req, timeout=self.conf.TIMEOUT)
            data = resp.read()
            try:
                data = json.loads(data)
                if not self.is_data_ok(data):
                    print data
                    self.panic("[api error]: %s" %(url), False)
                    return None, None
            except Exception, e:
                self.panic(data)
            return (resp, data)
        except socket.timeout:
            self.panic("[api timeout]: %s" %(url), False)
            return None, None
        except (urllib2.HTTPError, urllib2.URLError),e:
            code = ""
            if isinstance(e, urllib2.HTTPError):
                code = e.code
            self.panic("[api error %s]: %s\n    %s\n    you may check the url in browser for more details" %(code, e.reason, url))
            return None, None

    def do_query(self, args):
        from urllib import quote
        tmp = []
        ENCODING = None
        if sys.stdin.encoding and sys.stdin.encoding != 'utf-8':
            ENCODING = 'utf-8'
        for item in args:
            if ENCODING:
                item = item.decode(ENCODING).encode('utf-8')
            item = quote(item)
            tmp.append(item)
        args = tmp
        resp, data = self._do_query(args)
        content = data["data"]
        if self.conf.jsond:
            print json.dumps(content, sort_keys=True, indent=4, separators=(',', ': '))
        elif hasattr(self, "dump_%s"%(args[0])):
            getattr(self, "dump_%s"%(args[0]))(content)
        else:
            print json.dumps(content, sort_keys=True, indent=4, separators=(',', ': '))


if __name__ == "__main__":
    parser = parse_option()
    options, args = parser.parse_args()
    options.TIMEOUT = 60

    if options.version:
        print "whoisdb version %s" % __VERSION__
        sys.exit(0)

    if len(args) < 2:
        parser.print_help()
        sys.exit(1)

    method = args[0]
    if method not in WHOISDB_METHOD:
        sys.stderr.write("Unknown method %s, accepted methods are: [%s]\n" % (method, ", ".join(WHOISDB_METHOD)))

    try:
        config = parse_config(options.config)
    except Exception, e:
        sys.stderr.write("%s\n" %e.message)
        sys.exit(1)

    TOKEN = config.get("TOKEN", "") or TOKEN

    try:
        client = WhoisdbClient(API, TOKEN, options)
        client.do_query(args)
    except KeyboardInterrupt, e:
        sys.stderr.write(">>> User Interrupt.")
    except Exception, e:
        sys.stderr.write("Client Exception")
        sys.stderr.write(traceback.format_exc())
